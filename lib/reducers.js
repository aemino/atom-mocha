"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

var _redux = require('redux');

var _actions = require("./actions");

function identity(defaultValue) {
    return function (x) {
        return x || defaultValue;
    };
}

function updateSuiteToggleState(suites, id, state) {
    var suite = _extends({}, suites[id]);
    var result = _extends({}, suites);
    suite.toggleState = state;
    result[id] = suite;
    return result;
}

function expand(_x2) {
    var _arguments = arguments;
    var _again = true;

    _function: while (_again) {
        var suites = _x2;
        id = suite = undefined;
        _again = false;
        var id = _arguments.length <= 1 || _arguments[1] === undefined ? null : _arguments[1];

        if (!id) {
            return suites;
        }
        var suite = suites[id];
        _arguments = [_x2 = updateSuiteToggleState(suites, id, "expanded"), suite.parent];
        _again = true;
        continue _function;
    }
}

function expandParents(state, testId) {
    var _state$entities = state.entities;
    var tests = _state$entities.tests;
    var suites = _state$entities.suites;

    var test = tests[testId];
    if (test.status === "failed") {
        return _extends({}, state, {
            entities: {
                suites: expand(suites, test.parent),
                tests: tests
            }
        });
    }
    return state;
}

function toggleSuite(suites, id) {
    var state = suites[id].toggleState;
    return updateSuiteToggleState(suites, id, state === "collapsed" ? "expanded" : "collapsed");
}

function suites(suites, action) {
    if (suites === undefined) suites = {};

    if (action.type === _actions.Actions.TOGGLE_SUITE) {
        return toggleSuite(suites, action.suite);
    }
    return suites;
}

function updateTestStatus(tests, id, status, error) {
    var test = _extends({}, tests[id]);
    test.status = status;
    if (error) {
        test.error = error;
    }
    var result = _extends({}, tests);
    result[id] = test;
    return result;
}

function tests(tests, action) {
    if (tests === undefined) tests = {};

    if (action.type === _actions.Actions.BEGIN_TEST) {
        var id = action.test.id;

        return updateTestStatus(tests, id, "pending");
    }
    if (action.type === _actions.Actions.END_TEST) {
        var _action$test = action.test;
        var id = _action$test.id;
        var state = _action$test.state;
        var error = _action$test.error;

        return updateTestStatus(tests, id, state, error);
    }
    return tests;
}

function count(what) {
    return function (total, object) {
        if (object.status === what) {
            return total + 1;
        }
        return total;
    };
}

function determineStatus(suite, tests, suites) {

    var testStatus = {
        failed: tests.reduce(count("failed"), 0),
        passed: tests.reduce(count("passed"), 0)
    };
    if (testStatus.failed > 0 && testStatus.passed === 0) {
        return "failed";
    }
    if (testStatus.failed === 0 && testStatus.passed > 0) {
        return "passed";
    }
    if (testStatus.failed > 0 && testStatus.passed > 0) {
        return "partial";
    }

    var suiteStatus = {
        partial: suites.reduce(count("partial"), 0),
        failed: suites.reduce(count("failed"), 0),
        passed: suites.reduce(count("passed"), 0)
    };
    if (suiteStatus.partial > 0) {
        return "partial";
    }
    if (suiteStatus.failed > 0 && suiteStatus.passed === 0) {
        return "failed";
    }
    if (suiteStatus.failed === 0 && suiteStatus.passed > 0) {
        return "passed";
    }
    return "partial";
}
function updateSuiteStatus(suites, tests, id) {
    var suite = _extends({}, suites[id]);
    var suiteTests = suite.tests.map(function (s) {
        return tests[s];
    });
    var childSuites = suite.suites.map(function (s) {
        return suites[s];
    });
    suite.status = determineStatus(suite, suiteTests, childSuites);
    var result = _extends({}, suites);
    result[id] = suite;
    return result;
}

function setSuiteStatus(state, suite) {
    var id = suite.id;
    var _state$entities2 = state.entities;
    var suites = _state$entities2.suites;
    var tests = _state$entities2.tests;

    return _extends({}, state, {
        entities: {
            suites: updateSuiteStatus(suites, tests, id),
            tests: tests
        }
    });
}

var suitesAndTests = (0, _redux.combineReducers)({ suites: suites, tests: tests });
var entitiesAndResult = (0, _redux.combineReducers)({
    entities: suitesAndTests,
    result: identity([]),
    stats: identity(null)
});

var initialState = {
    stats: null,
    entities: {
        suites: {},
        tests: {}
    },
    result: []
};

exports["default"] = function (state, action) {
    if (state === undefined) state = initialState;

    if (action.type === _actions.Actions.RESTART) {
        return initialState;
    }
    if (action.type === _actions.Actions.BEGIN) {
        var _action$data = action.data;
        var result = _action$data.result;
        var entities = _action$data.entities;

        return {
            entities: {
                suites: _extends({}, entities.suites),
                tests: _extends({}, entities.tests)
            },
            result: [].concat(_toConsumableArray(result))
        };
    }

    if (action.type === _actions.Actions.END) {
        var stats = action.data.stats;

        return _extends({}, state, { stats: stats });
    }
    if (action.type === _actions.Actions.END_TEST) {
        var _action$test2 = action.test;
        var _status = _action$test2.status;
        var id = _action$test2.id;

        return expandParents(entitiesAndResult(state, action), id);
    }
    if (action.type === _actions.Actions.END_SUITE) {
        return setSuiteStatus(entitiesAndResult(state, action), action.suite);
    }
    return entitiesAndResult(state, action);
};

;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;base64,
